[core]
#	excludesfile = ~/.config/git/ignore
	pager = less -XF

	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	# [default] trailing-space: looks for spaces at the end of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	# Not supported by all filesystems! Check w/
	# `git update-index --test-untracked-cache`
	untrackedCache = true
[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
	ui = auto
[color "branch"]
	current = green reverse
[color "diff"]
	meta = magenta
[color "status"]
	added = green
	changed = yellow
	untracked = red
[branch]
	# Sort, recently changed branches last
	sort = committerdate
[alias]
	aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort | bat --language ini --style plain
	st = status -sb
	ci = commit
	co = checkout
	cp = cherry-pick
	sw = switch
	br = branch
	diff = diff --word-diff
	dc = diff --cached
	# Amends the previous commit, reusing the previous commit message
	#  from http://www.jukie.net/~bart/blog/20090409155905
	amend = commit --amend -C HEAD
	# Various commit listingsâ€¦
	#  from http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
	ls = log --pretty=format:"%C(auto,yellow)%h%C(auto,red)%d\\ %C(auto,reset)%s%C(auto,blue)\\ [%cn]" --decorate
	ll = log --pretty=format:"%C(auto,yellow)%h%C(auto,red)%d\\ %C(auto,reset)%s%C(auto,blue)\\ [%cn]" --decorate --numstat
	lds = log --pretty=format:"%C(auto,yellow)%h\\ %ad%C(auto,red)%d\\ %C(auto,reset)%s%C(auto,blue)\\ [%cn]" --decorate --date=short
	ld = log --pretty=format:"%C(auto,yellow)%h\\ %ad%C(auto,red)%d\\ %C(auto,reset)%s%C(auto,blue)\\ [%cn]" --decorate --date=relative
	grep = grep -Ii
	# Ignore file that are tracked, but do not commit changes
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
	network = log --graph --oneline
	# Current branch name
	branch-name = "symbolic-ref --short HEAD"

	meld = difftool -t meld
	kdiff3 = difftool -t kdiff3
	diff-vscode = difftool -t diff-vscode

	# All commits related to a file
	filelog = log -u

	# Find merge commit that contains a specific commit
	# From https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
	find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
	show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
	# Which branches contain a commit?
	# From https://coderwall.com/p/7fp5dg/finding-git-branches-which-contain-the-specified-commit
	contains = !sh -c 'git branch --all --contains $1' -

	# Safer alternative to `git push --force`
	please = push --force-with-lease

	# Short commit ID for commit in repository
	short = rev-parse --short

	# Interactive rebase with the given number of latest commits.
	rb = "!r() { git rebase -i HEAD~$1; }; r"

[apply]
	whitespace = strip
[diff]
	algorithm = patience
	indentHeuristic = on
	colorMoved = default
	submodule = log
	# Detect copies as well as renames.
	renames = copies
[diff "odf"]
	# Text diff for OpenDocument files; requires repository changes as well
	#  from http://git.or.cz/gitwiki/GitTips#HowtousegittotrackOpenDocument.28OpenOffice.2CKoffice.29files.3F
	textconv=odt2txt
[commit]
	gpgsign = false
[gpg]
	program = gpg2
[giggle]
	main-window-maximized = true
	main-window-geometry = 803x738+160+162
	history-view-vpane-position = 519
	main-window-view = HistoryView
	file-view-vpane-position = 869
[pull]
	# Disable automatically creating merge commits on `git pull`. Forces you to
	# do one of:
	# 1. rebase from another branch, with `git rebase other-branch`
	# 2. rebase against (remote) origin, with `git pull --rebase`
	# 3. force creation of a merge commit with `git pull --no-ff`.
	ff = only
[push]
	default = simple
[difftool]
	prompt = false
[difftool "diff-vscode"]
	cmd = code --diff --new-window --wait $LOCAL $REMOTE
[include]
	path = user
[merge]
	conflictstyle = diff3
	# Include summaries of merged commits in newly created merge commit messages
	log = true
[submodule]
	recurse = true
[status]
	submodulesummary = true
[init]
	defaultBranch = trunk
